// DexPatcher Patched Application plugin:

apply plugin: 'com.github.lanchon.dexpatcher.patched-application'

// The DexPatcher Patched Application plugin produces a modified Android application
// by applying changes and additions to code and resources of a source application
// imported as a DexPatcher APK library.

// General Plugin Configuration
dexpatcherConfig {
    // This should point to a local clone of the DexPatcher Gradle plugin support tool
    // repo that is available here: https://github.com/Lanchon/DexPatcher-gradle-tools
    // But instead of defining the directory here, add a 'dexpatcher.dir' entry to the
    // 'local.properties' of the root project. That way it becomes available to all
    // subprojects and the local configuration is not posted to the VCS.
    //dir = '~/android/dexpatcher/dexpatcher-gradle-tools'

    // Specific Plugin Configuration
    patchedApplication {
        // Enable import of Java symbols from the source app. Defaults to true.
        //importSymbols = true;

        // Speed up debug builds by enabling multi-threaded multi-dex processing for them,
        // but only if multi-dex mode is already enabled for them. Defaults to true.
        //multiDexThreadedForMultiDexDebugBuilds = true

        // Speed up debug builds by enabling multi-threaded multi-dex processing for them,
        // even if multi-dex mode is not already enabled for them. Note that apps patched
        // in multi-dex mode are only compatible with devices running Android 5.0 (API 21)
        // and later. Defaults to false.
        //multiDexThreadedForAllDebugBuilds = true
    }

    // Per-Tool Defaults
    dexpatcher {
        // The Android api level of dex files. The api level is auto-detected by DexPatcher
        // v1.2.0 and later, so this setting is no longer needed for normal operation.
        //apiLevel = 14

        // Enable multi-dex support. Note that DexPatcher only supports native multi-dex as
        // implemented in ART and does not support legacy multi-dex for Dalvik VM. Patched
        // multi-dex apps are only compatible with Android 5.0 (API 21) and later devices.
        multiDex = true

        // Enable multi-threaded multi-dex processing, if multi-dex mode is already enabled.
        // Multi-threaded processing is faster but produces more dex files than the bare
        // minimum required by the contents of the patched app. This is recommended for
        // debug builds but not for releases.
        //multiDexThreaded = true

        // Set the number of multi-dex processing threads, if multi-threaded multi-dex mode
        // is already enabled. Defaults to the number of available processors up to 4.
        //multiDexJobs = 8

        // The maximum number of items in the pools of the output dex files. This limits,
        // for example, the number of method references in each dex file. Defaults to 65536.
        //maxDexPoolSize = 65536

        // The package name of the used DexPatcher annotations. Useful to handle rogue apps
        // that want to disallow patching by intentionally clashing with standard DexPatcher
        // annotation names. Defaults to 'lanchon.dexpatcher.annotation'.
        //annotationPackage = 'lanchon.dexpatcher.annotation'

        // Enable implicit ignore of trivial default constructors. Defaults to true.
        //constructorAutoIgnore = true

        // Enable compatibility with the deprecated DexTag.
        //compatDexTag = true

        // The verbosity of the DexPatcher tool. One of QUIET, NORMAL, VERBOSE or DEBUG.
        // Defaults to NORMAL, but VERBOSE is recommended.
        verbosity = VERBOSE

        // Enable logging of relative paths of source files instead of just their filename.
        //logSourcePath = true

        // Enable logging of paths of source files prepending the specified root.
        //logSourcePathRoot = file('src/main/java')

        // Enable logging of timing statistics.
        //logStats = true
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion '23.0.3'

    defaultConfig {
        // The 'package' attribute in the patched app manifest must be different from the
        // source app ID to support class generation (R and BuildConfig), but here you can
        // override the exported patched app ID to match the source.
        applicationId 'fi.polar.polarflowbeep'

        // You must set these fields to match or be compatible with the corresponding data
        // of the source app. (Data is displayed when the source apk library is built.)
        minSdkVersion 25
        targetSdkVersion 25
        versionCode 2502301
        versionName '2.3.1-beep'
    }

    signingConfigs {
        release {
            try {
                storeFile file('../../keystore/polarflowbeep.jks')
                keyAlias 'key0'
                storePassword KEYSTORE_PASSWORD
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
        }
    }
}

tasks.withType(com.android.build.gradle.tasks.Lint) {
    enabled = false
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // To produce a patched application we need to import an apk library created from the
    // app we want to modify. In this case we import the artifact produced by the 'source'
    // subproject. But the library could be produced by an independent project and imported
    // manually in Android Studio just like any other android library (aar) file.
    compile project(':source')
    compile project(':fusedgps')
}
